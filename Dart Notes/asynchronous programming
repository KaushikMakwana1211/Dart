What is Asynchronous Programming in Dart?
Asynchronous programming allows a program to run tasks without blocking the execution of other tasks. This means the program can perform multiple operations concurrently, improving efficiency.

In Dart, async programming is achieved using:
âœ… Future (for single async operations)
âœ… async & await (to handle Futures easily)
âœ… Stream (for handling multiple asynchronous events)

Why Use Asynchronous Programming?
Prevents UI Freezing â€“ Keeps apps responsive while waiting for network requests, file reading, or database queries.
Handles Long-Running Tasks Efficiently â€“ Tasks like API calls, file I/O, and database operations run in the background.
Improves Performance â€“ Enables concurrent execution, speeding up apps.

How Asynchronous Programming Works in Dart
1. Using Future (Single Asynchronous Operation)
A Future represents a delayed computation that will return a value in the future.
ðŸ”¹ The program continues execution without waiting for the delay.


2. Using async & await (Easier Future Handling)
Instead of using .then(), async and await make asynchronous code look more like synchronous code.
ðŸ”¹ await pauses execution until fetchData() completes.
ðŸ”¹ No need for callbacks, making the code cleaner.

3. Using Stream (Handling Multiple Async Events)
A Stream is used for handling continuous data like user input, sensor data, or API events.
ðŸ”¹ The yield keyword emits values over time.
ðŸ”¹ await for listens to the Stream asynchronously.